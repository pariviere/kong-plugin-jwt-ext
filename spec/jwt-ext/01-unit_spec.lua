local PLUGIN_NAME = "jwt-ext"

-- helper to debug
function dump(o)
  if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
              if type(k) ~= 'number' then k = '"'..k..'"' end
              s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
  else
      return tostring(o)
  end
end

local jwt_parser = require("kong.plugins.jwt.jwt_parser")
local jwt_parser_ext = require("kong.plugins."..PLUGIN_NAME..".jwt_parser_ext")


describe(PLUGIN_NAME .. ": ", function()

  it("inherits kong jwt_parser", function()
    local jwt_parser = require("kong.plugins.jwt.jwt_parser")

    local token = jwt_parser.encode({sub = "foo"}, "secret")
    local jwt = assert(jwt_parser_ext:new(token))
    assert.same("foo", (jwt.claims['sub']))

    assert(jwt.validate_scopes, "validate_scopes is defined")
  end)

  describe("(validation)", function()
    describe("(string) ", function()
      it("failed with no matching rules", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"scope1"})
        assert.False(ok)
        assert.same({}, filtered)
      end)
      it("supports AND rules", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("supports OR rules", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid,user,somethingelse"})
        assert.True(ok)
        assert.same({'openid', 'user'}, filtered)
      end)
      it("supports multiple rules with the first matching", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo", "last"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("supports multiple rules with the middle matching", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"first", "openid userinfo", "last"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("supports multiple rules with the last matching", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"first", "user"})
        assert.True(ok)
        assert.same({'user'}, filtered)
      end)
      it("supports with no rules matching", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid somethingnothere", "last"})
        assert.False(ok)
        assert.same({}, filtered)
      end)
      it("can match only one rule", function()
        local token = jwt_parser.encode({scopes = "openid userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo", "last"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("case matters", function()
        local token = jwt_parser.encode({scopes = "OPENID userinfo user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo", "last"})
        assert.False(ok)
        assert.same({}, filtered)
      end)
      it("support scope with non-alphanum", function()
        local token = jwt_parser.encode({scopes = "app:foo_bar1 app:bar_foo1 user"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"app:foo_bar1,app:bar_foo1", })
        assert.True(ok)
        assert.same({"app:foo_bar1", "app:bar_foo1"}, filtered)
      end)
      it("support scope with lua magic character", function()
        local token = jwt_parser.encode({scopes = "app-bar%20foo1"}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"app-bar%20foo1"})
        assert.True(ok)
        assert.same({"app-bar%20foo1"}, filtered)
      end)
    end)


    describe("(array) ", function()
      it("failed with no matching rules", function()
        local token = jwt_parser.encode({scopes = {"openid userinfo user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"scope1"})
        assert.False(ok)
        assert.same({}, filtered)
      end)
      it("supports AND rules", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("supports OR rules", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid,user,somethingelse"})
        assert.True(ok)
        assert.same({'openid', 'user'}, filtered)
      end)
      it("supports multiple rules with the first matching", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo", "last"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("supports multiple rules with the middle matching", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"first", "openid userinfo", "last"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("supports multiple rules with the last matching", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"first", "user"})
        assert.True(ok)
        assert.same({'user'}, filtered)
      end)
      it("supports with no rules matching", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid somethingnothere", "last"})
        assert.False(ok)
        assert.same({}, filtered)
      end)
      it("can match only one rule", function()
        local token = jwt_parser.encode({scopes = {"openid",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo", "last"})
        assert.True(ok)
        assert.same({'openid', 'userinfo'}, filtered)
      end)
      it("case matters", function()
        local token = jwt_parser.encode({scopes = {"OPENID",  "userinfo", "user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"openid userinfo", "last"})
        assert.False(ok)
        assert.same({}, filtered)
      end)
      it("support scope with non-alphanum", function()
        local token = jwt_parser.encode({scopes = {"app:foo_bar1", "app:bar_foo1 user"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"app:foo_bar1,app:bar_foo1", })
        assert.True(ok)
        assert.same({"app:foo_bar1", "app:bar_foo1"}, filtered)
      end)
      it("support scope with lua magic character", function()
        local token = jwt_parser.encode({scopes = {"app-bar%20foo1"}}, "secret")
        local jwt = assert(jwt_parser_ext:new(token))
        local ok, filtered = jwt:validate_scopes("scopes", {"app-bar%20foo1"})
        assert.True(ok)
        assert.same({"app-bar%20foo1"}, filtered)
      end)
    end)
  end)
end)